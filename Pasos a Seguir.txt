- Crear carpeta del proyecto

- Abrir carpeta de proyecto en VS Code

**************************
** ENTORNO VIRTUAL      **
**************************

- Ctrl + Shift + ñ => Abrir terminal

- Vamos a crear un entorno virtual: Para aislar los paquetes del proyecto de proximos proyectos
Usaremos un módulo llamado 'Virtualenv'
	pip3 install virtualenv => en terminal, instala virtualenv
Para crearlo:
win10?	virtualenv venv => en terminal///////////////////////////////////
ubuntu?	virtualenv --python=/usr/bin/python3.10 my-env///////////////////////////////
Para activarlo:
Una vez que has creado tu entorno virtual con virtualenv, debes activarlo para poder usarlo. Para ello, debes ejecutar el siguiente comando: source /venv/bin/activate en Linux o source .\venv\Scripts\activate en Windows10. Con esto, el entorno virtual quedará activado y te aparecerá el nombre del entorno virtual al inicio de la línea en la terminal de comandos1.

si abrimos terminal ERROR:
---
& : No se puede cargar el archivo *\venv\Scripts\Activate.ps1 porque la ejecución de scripts está deshabilitada en este sistema. Para 
obtener más información, consulta el tema about_Execution_Policies en https:/go.microsoft.com/fwlink/?LinkID=135170.
En línea: 1 Carácter: 3
+ & c:/Users/juanc/Desktop/Django/venv/Scripts/Activate.ps1
+   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : SecurityError: (:) [], PSSecurityException
    + FullyQualifiedErrorId : UnauthorizedAccess
---
Se soluciona:
	Abre powershell como admin
	ejecuta: > Set-ExecutionPolicy RemoteSigned -Scope CurrentUser 
		 > O
***********************
** COMENZAR PROYECTO **
***********************

- crear archivo app.py => Backend

- crear movies.py => simula datos de la BD:
movies = [
    { "titulo": "Avatar", "director": "James Cameron", "anno": 2009 },
    { "titulo": "El sexto sentido", "director": "M. Night Shyamalan", "anno": 1999 },
    { "titulo": "El padrino", "director": "Francis Ford Coppola", "anno": 1972 }
]

- Necesitamos un framework ¿Por qué?
Un framework es una herramienta que proporciona una estructura predefinida y un conjunto de librerías para facilitar el desarrollo de aplicaciones. Flask, por ejemplo, es un framework para el desarrollo de aplicaciones web en Python que ofrece herramientas y librerías para manejar solicitudes HTTP, definir rutas y devolver respuestas en formato JSON, entre otras funcionalidades.

Al utilizar un framework como Flask, puedes ahorrar tiempo y esfuerzo al no tener que programar desde cero funcionalidades comunes en el desarrollo de aplicaciones web. En su lugar, puedes concentrarte en escribir el código específico para tu aplicación y dejar que el framework se encargue de las tareas comunes.

Hay muchos otros frameworks excelentes disponibles para crear APIs REST, como Django, Pyramid y Falcon. He elegido Flask porque es un framework ligero y flexible que te permite tener un control completo sobre cómo se estructura y se comporta tu aplicación. Esto significa que puedes personalizar tu aplicación para satisfacer tus necesidades específicas.

- Instalamos el framework Flask :
	En terminal: pip install flask





